import sys
import os

from operator import itemgetter

from langchain_core.chat_history import BaseChatMessageHistory
from langchain_community.chat_message_histories import ChatMessageHistory
from langchain_community.vectorstores import FAISS
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain.chains import create_history_aware_retriever, create_retrieval_chain
from langchain.chains.combine_documents import create_stuff_documents_chain
from langchain.prompts.chat import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_core.messages import BaseMessage
from typing import List, Optional, Dict, Any

from utils.model_loader import ModelLoader
from exception.custom_exception import DocumentPortalException
from logger.custom_logger import CustomLogger
from prompt.prompt_library import PROMPT_REGISTRY
from model.models import PromptType

class ConversationalRAG:
    def __init__(self, session_id: str, retriever: None):
        try:
            self.log = CustomLogger().get_logger(__name__)
            self.session_id = session_id

            self.llm = self._load_llm()
            self.contextualize_prompt: ChatPromptTemplate = PROMPT_REGISTRY[PromptType.CONTEXTUALIZE_QUESTION.value]
            self.qa_prompt: ChatPromptTemplate = PROMPT_REGISTRY[PromptType.CONTEXT_QA.value]

            if retriever is None:
                raise ValueError("Retriever cannot be None")
            self.retriever = retriever
            self._build_lcel_chain()
            self.log.info("ConversationalRAG initialized", session_id=self.session_id)

        except Exception as e:
            self.log.error(f"Error initializing ConversationalRAG: {e}")
            raise DocumentPortalException("Failed to initialize ConversationalRAG", sys)

    def load_retriever_from_faiss(self, index_path: str):
        # Logic to load and return the retriever
        try:
            embeddings = ModelLoader().load_embeddings()
            if not os.path.isdir(index_path):
                raise ValueError(f"FAISS index path does not exist or is not a directory: {index_path}")
            
            vector_store = FAISS.load_local(
                index_path,
                embeddings,
                allow_dangerous_deserialization=True
            )
            
            self.retriever = vector_store.as_retriever(search_type="similarity", search_kwargs={"k": 3})
            self.log.info("Retriever loaded from FAISS", index_path=index_path, session_id=self.session_id)

            self._build_lcel_chain()
            return self.retriever

        except Exception as e:
            self.log.error(f"Error loading retriever from FAISS: {e}")
            raise DocumentPortalException("Failed to load retriever from FAISS", sys)

    def invoke(self, user_input: str, chat_history: Optional[list[BaseMessage]] = None) -> str:
        try:
            answer = self.chain.invoke({
                "input": user_input,
                "chat_history": chat_history or []
            })

            if not answer:
                self.log.warning("No answer generated by the chain", session_id=self.session_id)
                return "I'm sorry, but I couldn't find an answer to your question."
            
            self.log.info("Answer generated successfully", 
                          session_id=self.session_id,
                          user_input=user_input,
                          answer_preview=answer[:150] + ("..." if len(answer) > 150 else ""),
                          )
            
            return answer
        
        except Exception as e:
            self.log.error(f"Error invoking ConversationalRAG: {e}")
            raise DocumentPortalException("Failed to invoke ConversationalRAG", sys)

    def _load_llm(self):
        # Logic to load and return the LLM
        try:
            llm = ModelLoader().load_llms()
            if not llm:
                raise ValueError("Failed to load LLM")
            
            self.log.info("LLM loaded successfully", session_id=self.session_id)
            return llm
        
        except Exception as e:
            self.log.error(f"Error loading LLM: {e}")
            raise DocumentPortalException("Failed to load LLM", sys)

    @staticmethod
    def _format_docs(docs):
        # Logic to format the documents
        return "\n\n".join([doc.page_content for doc in docs])

    def _build_lcel_chain(self):
        try:

            question_rewriter = (
                {"input": itemgetter("input"),
                 "chat_history": itemgetter("chat_history")
                 }
                 | self.contextualize_prompt
                 | self.llm
                 | StrOutputParser()
            )

            retrieve_docs = question_rewriter | self.retriever | self._format_docs

            self.chain = (
                {
                    "context": retrieve_docs,
                    "input": itemgetter("input"),
                    "chat_history": itemgetter("chat_history")
                }
                | self.qa_prompt
                | self.llm
                | StrOutputParser()
            )

            self.log.info("LCEL chain built successfully", session_id=self.session_id)

        except Exception as e:
            self.log.error(f"Error building LCEL chain: {e}")
            raise DocumentPortalException("Failed to build LCEL chain", sys)
